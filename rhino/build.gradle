plugins {
    id 'rhino.library-conventions'
}

dependencies {
    testImplementation project(':testutils')
}

publishing {
    publications {
        rhino(MavenPublication) {
            from components.java
            artifacts = [jar, sourceJar, javadocJar]
            // We need to use the "withXml" method here, rather than the
            // "pom" element in Gradle, because we can't add the "parent"
            // attribute otherwise, and without it Maven Central verification
            // will fail.
            pom.withXml {
                def root = asNode()

                root.appendNode('description', "Rhino JavaScript runtime jar, excludes XML, tools, and ScriptEngine wrapper")
                root.appendNode("url", "https://mozilla.github.io/rhino/")

                def p = root.appendNode("parent")
                p.appendNode("groupId", "org.sonatype.oss")
                p.appendNode("artifactId", "oss-parent")
                p.appendNode("version", "7")

                def l = root.appendNode("licenses").appendNode("license")
                l.appendNode("name", "Mozilla Public License, Version 2.0")
                l.appendNode("url", "http://www.mozilla.org/MPL/2.0/index.txt")

                def scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git@github.com:mozilla/rhino.git")
                scm.appendNode("developerConnection", "scm:git:git@github.com:mozilla/rhino.git")
                scm.appendNode("url", "git@github.com:mozilla/rhino.git")

                def o = root.appendNode("organization")
                o.appendNode("name", "The Mozilla Foundation")
                o.appendNode("url", "http://www.mozilla.org")
            }
        }
    }
}
decycle {
    /*
     * The Decycle plugin is designed to ensure cycle-freedom between Java
     * packages or to explicitly document cases where a cycle is tolerated
     * or intentional.
     * From a modularization perspective, it is always beneficial to keep the
     * architecture as cycle-free as possible. If future development in Rhino
     * introduces new cycles, developers must assess whether there is a valid
     * justification for the cycle or whether it can be avoided - e.g., by
     * using the ServiceLoader mechanism
     */

    // accepted cycle: package o.m.j.json contains only one class. Maybe move it to o.m.j
    ignoring from: "org.mozilla.javascript.NativeJSON", to: "org.mozilla.javascript.json.JsonParser*"

    // accepted cycle: but would be easy to solve - FunctionObject uses only an "instanceOf ModuleScope"
    ignoring from: "org.mozilla.javascript.FunctionObject", to: "org.mozilla.javascript.commonjs.module.ModuleScope"

    // accepted cycle: o.m.j.debug is strongly coupled to o.m.j
    ignoring from: "org.mozilla.javascript.debug.*", to: "org.mozilla.javascript.Kit"
    ignoring from: "org.mozilla.javascript.debug.*", to: "org.mozilla.javascript.Context"
    ignoring from: "org.mozilla.javascript.debug.*", to: "org.mozilla.javascript.Scriptable"

    // accepted cycle: o.m.j.xml is strongly coupled to o.m.j (xmlimpl already in separate module)
    ignoring from: "org.mozilla.javascript.*", to: "org.mozilla.javascript.xml.*"

    // accepted cycle: o.m.j.ast is strongly coupled to o.m.j
    ignoring from: "org.mozilla.javascript.*", to: "org.mozilla.javascript.ast.*"

    // accepted cycle: typedarrays are strongly coupled. (See #1893 of an idea, how to remove)
    ignoring from: "org.mozilla.javascript.ScriptRuntime", to: "org.mozilla.javascript.typedarrays.*"
    ignoring from: "org.mozilla.javascript.NativeArrayIterator", to: "org.mozilla.javascript.typedarrays.NativeTypedArrayView"

    // TODO: easy to remove: See #1890
    ignoring from: "org.mozilla.classfile.ClassFileWriter\$StackMapTable", to: "org.mozilla.javascript.Kit"

    // TODO: Long-term-plan: LiveConnect should be moved to a separate module
    // TODO: Move all "Native*" classes to o.m.j.lc
    ignoring from: "org.mozilla.javascript.Native*", to: "org.mozilla.javascript.lc.type.TypeInfo*"
    // CHECKME: Can we move JavaMembers + MemberBox also to o.m.j.lc
    ignoring from: "org.mozilla.javascript.JavaMembers", to: "org.mozilla.javascript.lc.type.TypeInfo*"
    ignoring from: "org.mozilla.javascript.MemberBox", to: "org.mozilla.javascript.lc.type.TypeInfo*"
    ignoring from: "org.mozilla.javascript.AccessorSlot\$MemberBoxSetter", to: "org.mozilla.javascript.lc.type.TypeInfo"
    // CHECKME: Can we remove dependency to typeinfo from these objects?
    ignoring from: "org.mozilla.javascript.ScriptableObject", to: "org.mozilla.javascript.lc.type.TypeInfoFactory"
    ignoring from: "org.mozilla.javascript.FunctionObject", to: "org.mozilla.javascript.lc.type.TypeInfo*"
    ignoring from: "org.mozilla.javascript.Context", to: "org.mozilla.javascript.lc.type.TypeInfo*"

    // currently accepted cycles (may be resolved, when it is clear, how to separate the liveconnect stuff)
    ignoring from: "org.mozilla.javascript.lc.type.TypeInfoFactory", to: "org.mozilla.javascript.lc.type.impl.factory.*"
    ignoring from: "org.mozilla.javascript.lc.type.TypeInfo", to: "org.mozilla.javascript.lc.type.impl.*"
    ignoring from: "org.mozilla.javascript.lc.type.TypeFormatContext", to: "org.mozilla.javascript.lc.type.impl.ClassSignatureFormatContext"

}
